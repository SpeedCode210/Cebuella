@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject IUserService UserService
@{
    var userId = User.FindFirst(ClaimTypes.Name)?.Value;
    var fullName = await UserService.GetUserFullNameAsync(userId);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"] - Cebuella</title>
    <link rel="icon" type="image/png" href="/cebuella.png">
    <link rel="stylesheet" href="https://bootswatch.com/5/lumen/bootstrap.css"/>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/Cebuella.styles.css" asp-append-version="true"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.0/min/vs/editor/editor.main.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.0/min/vs/loader.min.js"></script>

</head>
<body>

<header>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
        <div class="container">
            <a class="navbar-brand" asp-area="" asp-page="/Index"><img style="height:40px" src="/cebuella.png"/></a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                    aria-controls="navbarCollapse"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-page="/Index">Home</a>
                    </li>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-page="/Profile">@fullName</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-page="/Logout">Log out</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>
</header>
<div class="container">
    <main role="main" class="pb-3">
        @RenderBody()
    </main>
</div>

<footer class="border-top footer text-muted">
    <div class="container">
        Cebuella - Student Progress Tracker &copy; 2025 Raouf Ould Ali
    </div>
</footer>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
@await RenderSectionAsync("Scripts", required: false)
<script>
    // Initialize Bootstrap components
    document.addEventListener('DOMContentLoaded', function() {
        let navbarToggler = document.querySelector('.navbar-toggler');
        let navbarCollapse = document.querySelector('#navbarCollapse');
        let x = true;
        navbarToggler.addEventListener('click', function() {
            if (x) navbarCollapse.classList.add('show');
            else navbarCollapse.classList.remove('show');
            x = !x;
        });
    });

    document.addEventListener("DOMContentLoaded", () => {
        // Function to detect URLs in text and make them clickable
        function makeUrlsClickable(element) {
            const urlRegex = /(https?:\/\/\S+|www\.\S+)/g; // Match URLs starting with http(s):// or www.

            element.querySelectorAll("*").forEach((node) => {
                if (
                    node.childNodes.length === 1 &&
                    node.childNodes[0].nodeType === Node.TEXT_NODE &&
                    node.tagName !== "A" // Ignore <a> tags
                ) {
                    const text = node.innerHTML;

                    // If the text contains URLs
                    if (urlRegex.test(text)) {
                        node.innerHTML = text.replace(urlRegex, (url) => {
                            const href = url.startsWith("http") ? url : `https://${url}`; // Add https:// if not present
                            return `<a href="${href}" target="_blank">${url}</a>`;
                        });
                    }
                }
            });
        }

        // Run the function on the entire body of the document
        makeUrlsClickable(document.body);
    });
</script>
</body>
</html>